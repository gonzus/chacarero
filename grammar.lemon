%include {
#include "log.h"
#include "lexer.h"
#include "parser.h"
}

%token_type { Value* }

// We disable this for now, the destructor is being called too early
// NOTE: MASSIVE MEMORY LEAK!
// %default_destructor { value_destroy($$); }

%extra_argument { AST *ast }

%parse_accept { LOG_INFO("The parser has completed successfully"); }

%syntax_error { LOG_INFO("** PARSER **: syntax error"); }

%parse_failure { LOG_INFO("** PARSER **: parser failure"); }

%start_symbol program

// UNARY OPERATOR
unary_operator ::= ADD.
unary_operator ::= SUB.
unary_operator ::= BNOT.
unary_operator ::= LNOT.

// ASSIGNMENT OPERATOR
assignment_operator ::= EQ.

variable_scalar(V) ::= DOLLAR NAME(N).  { LOG_INFO("VAR$ [%s]", N->vsym); V = N; }
variable_array(V)  ::= AT NAME(N).      { LOG_INFO("VAR@ [%s]", N->vsym); V = N; }
variable_hash(V)   ::= PERCENT NAME(N). { LOG_INFO("VAR% [%s]", N->vsym); V = N; }

// SCALAR VALUES
scalar_value(V) ::= variable_scalar(S). { V = S; }
scalar_value(V) ::= NAME(N). { LOG_INFO("NAME [%s]", N->vsym); V = N; }
scalar_value(V) ::= INT_LITERAL(I). { LOG_INFO("INT [%d]", I->vint); V = I; }
scalar_value(V) ::= STRING_LITERAL_SINGLE(S). { LOG_INFO("STRS [%s]", S->vstr); V = S; }
scalar_value(V) ::= STRING_LITERAL_DOUBLE(S). { LOG_INFO("STRD [%s]", S->vstr); V = S; }

// ARRAY VALUES
array_value(V) ::= variable_array(A). { V = A; }
array_value ::= LBRACKET RBRACKET. { LOG_INFO("EMPTY ARRAY"); }
array_value ::= LBRACKET value_only_list RBRACKET. { LOG_INFO("ARRAY"); }

// HASH VALUES
hash_value(V) ::= variable_hash(H). { V = H; }
hash_value ::= LBRACE RBRACE. { LOG_INFO("EMPTY HASH"); }
hash_value ::= LBRACE key_and_value_list RBRACE. { LOG_INFO("HASH"); }

// ANY VALUES
value ::= scalar_value.
value ::= array_value.
value ::= hash_value.

key_and_value ::= scalar_value COLON value.

value_only_list ::= value.
value_only_list ::= value_only_list COMMA value.

key_and_value_list ::= key_and_value.
key_and_value_list ::= key_and_value_list COMMA key_and_value.

// PRIMARY EXPRESSION
primary_expression ::= value.
primary_expression ::= LPAREN expression RPAREN.

// POSTFIX EXPRESSION
postfix_expression ::= primary_expression.
postfix_expression ::= postfix_expression ARROW NAME.
postfix_expression ::= postfix_expression ADDADD.
postfix_expression ::= postfix_expression SUBSUB.

// UNARY EXPRESSION
unary_expression ::= postfix_expression.
unary_expression ::= ADDADD unary_expression.
unary_expression ::= SUBSUB unary_expression.
unary_expression ::= unary_operator cast_expression.

// CAST EXPRESSION
cast_expression ::= unary_expression.

// MULTIPLICATIVE EXPRESSION
multiplicative_expression ::= cast_expression.
multiplicative_expression ::= multiplicative_expression MUL cast_expression.
multiplicative_expression ::= multiplicative_expression DIV cast_expression.
multiplicative_expression ::= multiplicative_expression MOD cast_expression.

// ADDITIVE EXPRESSION
additive_expression ::= multiplicative_expression.
additive_expression ::= additive_expression ADD multiplicative_expression.
additive_expression ::= additive_expression SUB multiplicative_expression.

// SHIFT EXPRESSION
shift_expression ::= additive_expression.

// RELATIONAL EXPRESSION
relational_expression ::= shift_expression.
relational_expression ::= relational_expression LLT shift_expression.
relational_expression ::= relational_expression LGT shift_expression.
relational_expression ::= relational_expression LLE shift_expression.
relational_expression ::= relational_expression LGE shift_expression.

// EQUALITY EXPRESSION
equality_expression ::= relational_expression.
equality_expression ::= equality_expression LEQ relational_expression.
equality_expression ::= equality_expression LNE relational_expression.

// BIT AND EXPRESSION
and_expression ::= equality_expression.
and_expression ::= and_expression BAND equality_expression.

// BIT EXCLUSIVE OR EXPRESSION
exclusive_or_expression ::= and_expression.
exclusive_or_expression ::= exclusive_or_expression BXOR and_expression.

// BIT INCLUSIVE OR EXPRESSION
inclusive_or_expression ::= exclusive_or_expression.
inclusive_or_expression ::= inclusive_or_expression BOR exclusive_or_expression.

// LOGICAL AND EXPRESSION
logical_and_expression ::= inclusive_or_expression.
logical_and_expression ::= logical_and_expression LAND inclusive_or_expression.

// LOGICAL OR EXPRESSION
logical_or_expression ::= logical_and_expression.
logical_or_expression ::= logical_or_expression LOR logical_and_expression.

// CONDITIONAL EXPRESSION
conditional_expression ::=	logical_or_expression.
conditional_expression ::=	logical_or_expression QUESTION expression COLON conditional_expression.

// ASSIGNMENT EXPRESSION
assignment_expression ::= conditional_expression.
assignment_expression ::= unary_expression assignment_operator assignment_expression.  { LOG_INFO("Assignment"); }

// EXPRESSION
expression ::= assignment_expression.

// EXPRESSION STATEMENT
expression_statement ::= expression SEMICOLON.
expression_statement ::= SEMICOLON.

// STATEMENT
statement ::= expression_statement.

// STATEMENT LIST
statement_list ::= statement.
statement_list ::= statement_list statement.

// PROGRAM
program ::= statement_list END_TOKEN. { LOG_INFO("Constructed the program symbol"); }
program ::= unused.

// UNUSED TERMINALS
unused ::= DOT.
